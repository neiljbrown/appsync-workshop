input CreateDataPointInput {
    name: ID!
    createdAt: AWSDateTime
    value: Int
}

type DataPoint @aws_api_key {
    name: ID!
    createdAt: AWSDateTime!
    value: Int
}

type DataPointConnection @aws_api_key {
    items: [DataPoint]
    nextToken: String
}

input DeleteDataPointInput {
    name: ID!
    createdAt: AWSDateTime!
}

enum ModelSortDirection {
    ASC
    DESC
}

input ModelStringKeyConditionInput {
    eq: String
    le: String
    lt: String
    ge: String
    gt: String
    between: [String]
    beginsWith: String
}

type Mutation {
    createDataPoint(input: CreateDataPointInput!): DataPoint
    updateDataPoint(input: UpdateDataPointInput!): DataPoint
    deleteDataPoint(input: DeleteDataPointInput!): DataPoint
}

type Query {
    getDataPoint(name: ID!, createdAt: AWSDateTime!): DataPoint
    @aws_api_key

    listDataPoints(filter: TableDataPointFilterInput, limit: Int, nextToken: String): DataPointConnection
    @aws_api_key

    queryDataPointsByNameAndDateTime(
        name: ID!,
        createdAt: ModelStringKeyConditionInput,
        sortDirection: ModelSortDirection,
        filter: TableDataPointFilterInput,
        limit: Int,
        nextToken: String
    ): DataPointConnection
    @aws_api_key
}

type Subscription {
    onCreateDataPoint(name: ID, createdAt: AWSDateTime, value: Int): DataPoint
    @aws_subscribe(mutations: ["createDataPoint"])
    onUpdateDataPoint(name: ID, createdAt: AWSDateTime, value: Int): DataPoint
    @aws_subscribe(mutations: ["updateDataPoint"])
    onDeleteDataPoint(name: ID, createdAt: AWSDateTime, value: Int): DataPoint
    @aws_subscribe(mutations: ["deleteDataPoint"])
}

input TableBooleanFilterInput {
    ne: Boolean
    eq: Boolean
}

input TableDataPointFilterInput {
    name: TableIDFilterInput
    createdAt: TableStringFilterInput
    value: TableIntFilterInput
}

input TableFloatFilterInput {
    ne: Float
    eq: Float
    le: Float
    lt: Float
    ge: Float
    gt: Float
    contains: Float
    notContains: Float
    between: [Float]
}

input TableIDFilterInput {
    ne: ID
    eq: ID
    le: ID
    lt: ID
    ge: ID
    gt: ID
    contains: ID
    notContains: ID
    between: [ID]
    beginsWith: ID
}

input TableIntFilterInput {
    ne: Int
    eq: Int
    le: Int
    lt: Int
    ge: Int
    gt: Int
    contains: Int
    notContains: Int
    between: [Int]
}

input TableStringFilterInput {
    ne: String
    eq: String
    le: String
    lt: String
    ge: String
    gt: String
    contains: String
    notContains: String
    between: [String]
    beginsWith: String
}

input UpdateDataPointInput {
    name: ID!
    createdAt: AWSDateTime!
    value: Int
}